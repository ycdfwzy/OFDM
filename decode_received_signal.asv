function data = decode_received_signal(received_signal, standard_flag)
%DECODE_RECEIVED_SIGNAL 此处显示有关此函数的摘要
%   return decoded data from received data
%   此处显示详细说明

%% Parameters

start_flag = [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1]';
end_flag   = [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0]';

R = 1e3; % [bits/sec]
duration = 12.8; % [sec]
DataL = R*duration/2;  % Data length in symbols
NFFT = 128;

M = 4; % 4 QAM
snr = 20; % [dB]

Nsym = 4;           % Filter order in symbol durations
beta = 0.5;         % Roll-off factor
sampsPerSym = 10;    % Upsampling factor
L = sampsPerSym*Nsym + 1; % Raised cosine filter order
Fs = R * sampsPerSym;   % Sampling frequency
f1 = Fs/5;

fltDelay = Nsym / (2*R); % Filter group delay, since raised cosine filter is linear phase and symmetric.

%% Raised cosine filter design

% b = rcosdesign(beta, Nsym, sampsPerSym);
% shape = 'Raised Cosine';
% % Specifications of the raised cosine filter with given order in symbols
% rcosSpec = fdesign.pulseshaping(sampsPerSym, shape, 'Nsym,beta', Nsym, beta);
% rcosFlt = design(rcosSpec);
% rcosFlt.Numerator = rcosFlt.Numerator / max(rcosFlt.Numerator);

%% A/D
% t = (0 : length(received_signal)-1) / Fs;
% signal_complex = received_signal.*cos(2*pi*f1*t) - 1i * received_signal.*sin(2*pi*f1*t);

t = (0 : 1670-1) / Fs;
tmp = zeros(1, length(received_signal)-1670+1);
for i = 1:length(received_signal)-1670+1
    signal_complex = received_signal(i:i+1670-1).*cos(2*pi*f1*t) - 1i * received_signal(i:i+1670-1).*sin(2*pi*f1*t);
    tmp(i) = sum(abs(signal_complex'-standard_flag(1:1670)));
end
[~, start_Index] = mink(tmp, 100);
data = [];
for idx = 1:length(start_Index)
    received_signal = received_signal(start_Index(idx): end);
    t = (0 : length(received_signal)-1) / Fs;
    signal_complex = received_signal.*cos(2*pi*f1*t) - 1i * received_signal.*sin(2*pi*f1*t);

    % filtered_signal = filter(rcosFlt, [signal_complex.'; zeros(fltDelay*Fs,1)]); 
    % reconstructed_signal = downsample(filtered_signal, sampsPerSym);
    % reconstructed_signal = upfirdn([signal_complex.'; zeros(fltDelay*Fs,1)], b, 1, sampsPerSym);
    reconstructed_signal = rcfltdn([signal_complex.'; zeros(fltDelay*Fs,1)]);
    reconstructed_signal = reconstructed_signal(Nsym/2+1:end); % Correct for propagation delay by removing filter transients

    %% Serial to Parallel
    % fft_signal = zeros(int32(NFFT*length(reconstructed_signal)/(NFFT+L)), 1);
    re_calc = true;
    data = [];
    for i = 1:length(reconstructed_signal)/(NFFT+L)
        tmp = reconstructed_signal((i-1)*(NFFT+L)+1 : i*(NFFT+L));
        removing_cyclic_prefix = tmp(end-NFFT+1:end); % removing cyclic prefix
        fft_signal_cur = fft(removing_cyclic_prefix); % fft
    %     fft_signal = [fft_signal; fft_signal_cur];
    %     fft_signal((i-1)*NFFT+1: i*NFFT) = fft_signal_cur;

        data_cur_ = de2bi(qamdemod(fft_signal_cur, M), 'left-msb');
        data_cur  = zeros(NFFT*2, 1);
        for k = 1:length(data_cur_)
            data_cur(k*2-1) = data_cur_(k, 1);
            data_cur(k*2)   = data_cur_(k, 2);
        end
        if (i == 1) && sum(xor(start_flag, data_cur)) >= 2
            break;
        end
        if sum(xor(end_flag, data_cur)) < 2
            break;
        end
        data = [data; data_cur];
    end
    
end
data = data(NFFT*2+1: end);
% 
% demodulated_data = qamdemod(fft_signal, M);
% data_ = de2bi(demodulated_data, 'left-msb');
% data = zeros(length(data_)*2, 1);
% for i = 1:length(data_)
%     data(i*2-1) = data_(i, 1);
%     data(i*2)   = data_(i, 2);
% end
% data = data(NFFT*2+1: end-NFFT*2);
end

